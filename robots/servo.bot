@robot 'servo',
  local: true
  description: "Serves web interface and listens for browserchannel connections."

express = require 'express'
sockjs = require 'sockjs'
app = express()

app.use express.static(__dirname + '/public')

# Should pull this out into bootstrap server bot that registers itself with us somehow

fs = require 'fs'
qw = (x) -> x.split /\s+/

app.get '/bootstrap.json', (req, res) ->
  robots = {}
  for bot in qw "persistron robrary robootstrap print evalor netwerk cryptonominom federatron layoutron robotracker displayinator jsonformatic chatformatic nickformatic messagebuilder identity sendax iTransmitForTheUsers editro inputnik historinox accordy1 roborenderer d-tail copyscript localpaneller mainpaneller"
    robots[bot] = fs.readFileSync("robots/#{bot}.bot", "utf-8")
  res.send robots

opts = sockjs_url: "http://cdn.sockjs.org/sockjs-0.3.min.js"

sock = sockjs.createServer opts

clients = []
sock.on 'connection', (client) =>
  console.log "Client connected"

  clients.push client

  client.on 'data', (msg) =>
    return if msg is null or msg.local
    @transmit 'incoming message', JSON.parse msg
    console.log "message", msg

    # broadcast to all other clients
    c.write msg for c in clients when c != client

  client.on 'close', (reason) ->
    console.log "Client disconnected (#{reason})"
    # Remove the client from the client list
    clients = (c for c in clients when c != client)

server = require('http').createServer(app)

sock.installHandlers server, prefix: '/sock'

server.listen 4321

# Proxy incoming messages from other network channels
@listen 'incoming message', ({data: msg}) ->
  msg = JSON.stringify msg
  c.write msg for c in clients unless msg.local

@listen 'send message', ({data: msg}) ->
  msg = JSON.stringify msg
  c.write msg for c in clients unless msg.local

